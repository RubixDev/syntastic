//! The nord theme collection in this module was extracted from <https://github.com/shaunsingh/nord.nvim> using `auto_extract.py`.

use std::collections::BTreeMap;

use syntastica_core::{
    style::{Color, Style},
    theme::ResolvedTheme,
};

#[rustfmt::skip]
pub fn nord() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(216, 222, 233)),
        ("_bg".to_owned(), Style::color_only(46, 52, 64)),
        ("attribute".to_owned(), Style::new(Color::new(180, 142, 173), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(129, 161, 193), false, false, false, true)),
        ("character".to_owned(), Style::new(Color::new(163, 190, 140), false, false, true, false)),
        ("character.special".to_owned(), Style::new(Color::new(235, 203, 139), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(97, 110, 136), false, false, true, false)),
        ("conditional".to_owned(), Style::new(Color::new(129, 161, 193), false, false, true, false)),
        ("constant".to_owned(), Style::new(Color::new(235, 203, 139), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(143, 188, 187), false, false, false, true)),
        ("constant.macro".to_owned(), Style::new(Color::new(143, 188, 187), false, false, false, true)),
        ("constructor".to_owned(), Style::new(Color::new(129, 161, 193), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(191, 97, 106), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(129, 161, 193), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(191, 97, 106), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(180, 142, 173), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(216, 222, 233), false, false, true, false)),
        ("float".to_owned(), Style::new(Color::new(180, 142, 173), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(136, 192, 208), false, false, true, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(136, 192, 208), false, false, true, false)),
        ("function.macro".to_owned(), Style::new(Color::new(129, 161, 193), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(143, 188, 187), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(129, 161, 193), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(129, 161, 193), false, false, true, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(136, 192, 208), false, false, true, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(136, 192, 208), false, false, true, false)),
        ("keyword.return".to_owned(), Style::new(Color::new(136, 192, 208), false, false, true, false)),
        ("label".to_owned(), Style::new(Color::new(180, 142, 173), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(129, 161, 193), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(136, 192, 208), false, false, true, false)),
        ("namespace".to_owned(), Style::new(Color::new(216, 222, 233), false, false, true, false)),
        ("number".to_owned(), Style::new(Color::new(180, 142, 173), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(129, 161, 193), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(94, 129, 172), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(129, 161, 193), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(94, 129, 172), false, false, true, false)),
        ("punctuation".to_owned(), Style::new(Color::new(236, 239, 244), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(136, 192, 208), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(136, 192, 208), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(136, 192, 208), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(129, 161, 193), false, false, true, false)),
        ("storageclass".to_owned(), Style::new(Color::new(129, 161, 193), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(163, 190, 140), false, false, true, false)),
        ("string.escape".to_owned(), Style::new(Color::new(180, 142, 173), false, false, true, false)),
        ("string.regex".to_owned(), Style::new(Color::new(143, 188, 187), false, false, true, false)),
        ("string.special".to_owned(), Style::new(Color::new(235, 203, 139), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(180, 142, 173), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(216, 222, 233), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(180, 142, 173), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(216, 222, 233), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(94, 129, 172), false, false, true, false)),
        ("text.literal".to_owned(), Style::new(Color::new(216, 222, 233), false, false, false, false)),
        ("text.math".to_owned(), Style::new(Color::new(143, 188, 187), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(180, 142, 173), false, false, false, true)),
        ("text.strike".to_owned(), Style::new(Color::new(216, 222, 233), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(94, 129, 172), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(94, 129, 172), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(235, 203, 139), false, false, true, true)),
        ("text.underline".to_owned(), Style::new(Color::new(216, 222, 233), true, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(163, 190, 140), true, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(129, 161, 193), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(129, 161, 193), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(129, 161, 193), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(216, 222, 233), false, false, false, true)),
        ("variable.builtin".to_owned(), Style::new(Color::new(216, 222, 233), false, false, false, true)),
        ("variable.global".to_owned(), Style::new(Color::new(216, 222, 233), false, false, false, true)),
    ]))
}
