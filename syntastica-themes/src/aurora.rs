//! The aurora theme collection in this module was extracted from <https://github.com/ray-x/aurora> using `auto_extract.py`.

use std::collections::BTreeMap;

use syntastica_core::{
    style::{Color, Style},
    theme::ResolvedTheme,
};

#[rustfmt::skip]
pub fn aurora() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(221, 208, 244)),
        ("_bg".to_owned(), Style::color_only(33, 28, 47)),
        ("annotation".to_owned(), Style::new(Color::new(130, 170, 240), false, false, false, false)),
        ("attribute".to_owned(), Style::new(Color::new(127, 219, 202), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(255, 67, 91), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(255, 206, 81), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(249, 39, 114), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(97, 137, 187), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(238, 130, 238), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(251, 252, 191), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(231, 60, 80), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(249, 39, 114), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(102, 144, 196), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(255, 99, 71), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("definition".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("definition.usage".to_owned(), Style::new(Color::new(230, 219, 116), false, false, false, false)),
        ("emphasis".to_owned(), Style::new(Color::new(251, 237, 125), false, false, true, false)),
        ("exception".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(158, 113, 207), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(249, 39, 114), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(15, 185, 224), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(190, 154, 247), false, false, false, false)),
        ("identifier".to_owned(), Style::new(Color::new(218, 207, 228), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(213, 124, 213), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(196, 162, 255), false, false, true, false)),
        ("keyword.coroutine".to_owned(), Style::new(Color::new(241, 155, 182), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(15, 185, 224), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(250, 177, 194), false, false, false, false)),
        ("keyword.return".to_owned(), Style::new(Color::new(179, 118, 179), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(26, 173, 22), false, false, false, false)),
        ("literal".to_owned(), Style::new(Color::new(218, 207, 228), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(195, 60, 74), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(16, 174, 248), false, false, false, false)),
        ("method.call".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(231, 195, 251), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(253, 151, 32), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(161, 239, 228), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(251, 236, 159), false, false, false, false)),
        ("parameter.reference".to_owned(), Style::new(Color::new(161, 239, 228), false, false, false, true)),
        ("preproc".to_owned(), Style::new(Color::new(238, 130, 238), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(158, 113, 207), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(255, 99, 71), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(122, 166, 218), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(231, 195, 251), false, false, false, false)),
        ("punctuation.spectial".to_owned(), Style::new(Color::new(231, 197, 71), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(255, 114, 115), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(1, 213, 241), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(26, 188, 156), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(161, 239, 228), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(127, 219, 202), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(241, 155, 182), false, false, false, false)),
        ("strong".to_owned(), Style::new(Color::new(219, 192, 138), false, false, false, false)),
        ("structure".to_owned(), Style::new(Color::new(161, 239, 228), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(173, 219, 103), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(161, 239, 228), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(255, 99, 71), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(221, 208, 244), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(220, 20, 60), false, false, false, false)),
        ("text.environment".to_owned(), Style::new(Color::new(195, 60, 74), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(103, 213, 181), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(26, 188, 156), false, false, false, false)),
        ("text.math".to_owned(), Style::new(Color::new(255, 99, 71), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(255, 99, 71), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(251, 252, 191), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(108, 103, 234), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(0, 0, 255), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(128, 160, 255), true, false, false, false)),
        ("text.warning".to_owned(), Style::new(Color::new(236, 95, 103), false, false, false, false)),
        ("title".to_owned(), Style::new(Color::new(236, 196, 141), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(103, 213, 181), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(255, 206, 81), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(103, 213, 181), false, false, false, false)),
        ("underline".to_owned(), Style::new(Color::new(236, 196, 141), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(231, 195, 251), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(253, 151, 32), false, false, false, false)),
    ]))
}
