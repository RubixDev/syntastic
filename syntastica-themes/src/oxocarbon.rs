//! The oxocarbon theme collection in this module was extracted from <https://github.com/nyoom-engineering/oxocarbon.nvim> using `auto_extract.py`.

use std::collections::BTreeMap;

use syntastica_core::{
    style::{Color, Style},
    theme::ResolvedTheme,
};

#[rustfmt::skip]
pub fn dark() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(208, 208, 208)),
        ("_bg".to_owned(), Style::color_only(22, 22, 22)),
        ("attribute".to_owned(), Style::new(Color::new(130, 207, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(190, 149, 255), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(208, 208, 208), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(82, 82, 82), false, false, true, false)),
        ("conditional".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(190, 149, 255), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(66, 190, 101), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(51, 177, 255), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(130, 207, 255), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(208, 208, 208), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(130, 207, 255), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(255, 126, 182), false, false, false, true)),
        ("function.builtin".to_owned(), Style::new(Color::new(255, 126, 182), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(61, 219, 217), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(61, 219, 217), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(130, 207, 255), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(130, 207, 255), false, false, false, false)),
        ("number.date".to_owned(), Style::new(Color::new(61, 219, 217), false, false, false, false)),
        ("number.date.effective".to_owned(), Style::new(Color::new(66, 190, 101), false, false, false, false)),
        ("number.interval".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("number.quantity".to_owned(), Style::new(Color::new(51, 177, 255), false, false, false, false)),
        ("number.quantity.negative".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("number.status".to_owned(), Style::new(Color::new(255, 126, 182), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(208, 208, 208), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(208, 208, 208), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(61, 219, 217), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(61, 219, 217), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(61, 219, 217), false, false, false, false)),
        ("reference".to_owned(), Style::new(Color::new(208, 208, 208), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(190, 149, 255), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(130, 207, 255), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(208, 208, 208), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(130, 207, 255), false, false, false, true)),
        ("tag".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(130, 207, 255), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(130, 207, 255), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(208, 208, 208), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, true)),
        ("text.literal".to_owned(), Style::new(Color::new(208, 208, 208), false, false, false, false)),
        ("text.literal.commodity".to_owned(), Style::new(Color::new(66, 190, 101), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(208, 208, 208), false, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(238, 83, 150), false, true, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(66, 190, 101), false, false, false, false)),
        ("text.underline".to_owned(), Style::new(Color::new(238, 83, 150), true, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(190, 149, 255), true, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(120, 169, 255), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(208, 208, 208), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(208, 208, 208), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn light() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(55, 71, 79)),
        ("_bg".to_owned(), Style::color_only(255, 255, 255)),
        ("attribute".to_owned(), Style::new(Color::new(255, 171, 145), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(190, 149, 255), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(55, 71, 79), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(22, 22, 22), false, false, true, false)),
        ("conditional".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(190, 149, 255), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(66, 190, 101), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(15, 98, 254), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(255, 171, 145), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(55, 71, 79), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(255, 171, 145), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(103, 58, 183), false, false, false, true)),
        ("function.builtin".to_owned(), Style::new(Color::new(103, 58, 183), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(255, 126, 182), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(255, 126, 182), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(255, 171, 145), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(255, 171, 145), false, false, false, false)),
        ("number.date".to_owned(), Style::new(Color::new(255, 126, 182), false, false, false, false)),
        ("number.date.effective".to_owned(), Style::new(Color::new(66, 190, 101), false, false, false, false)),
        ("number.interval".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("number.quantity".to_owned(), Style::new(Color::new(15, 98, 254), false, false, false, false)),
        ("number.quantity.negative".to_owned(), Style::new(Color::new(255, 111, 0), false, false, false, false)),
        ("number.status".to_owned(), Style::new(Color::new(103, 58, 183), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(55, 71, 79), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(255, 111, 0), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(55, 71, 79), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(255, 126, 182), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(255, 126, 182), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(255, 126, 182), false, false, false, false)),
        ("reference".to_owned(), Style::new(Color::new(55, 71, 79), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(190, 149, 255), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(255, 171, 145), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(8, 189, 186), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(55, 71, 79), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(255, 171, 145), false, false, false, true)),
        ("tag".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(255, 171, 145), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(255, 171, 145), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(55, 71, 79), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(255, 111, 0), false, false, false, true)),
        ("text.literal".to_owned(), Style::new(Color::new(55, 71, 79), false, false, false, false)),
        ("text.literal.commodity".to_owned(), Style::new(Color::new(66, 190, 101), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(55, 71, 79), false, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(255, 111, 0), false, true, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(255, 111, 0), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(66, 190, 101), false, false, false, false)),
        ("text.underline".to_owned(), Style::new(Color::new(255, 111, 0), true, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(190, 149, 255), true, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(238, 83, 150), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(55, 71, 79), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(55, 71, 79), false, false, false, false)),
    ]))
}
