//! The github theme collection in this module was extracted from <https://github.com/project0n/github-nvim-theme> using `auto_extract.py`.

use std::collections::BTreeMap;

use syntastica_core::{
    style::{Color, Style},
    theme::ResolvedTheme,
};

#[rustfmt::skip]
pub fn dark() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(48, 54, 61)),
        ("attribute".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(139, 148, 158), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("constant.builtin.rust".to_owned(), Style::new(Color::new(255, 166, 87), false, false, false, false)),
        ("constant.html".to_owned(), Style::new(Color::new(126, 231, 135), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(255, 166, 87), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(248, 81, 73), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("field.lua".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("field.luadoc".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("field.python".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("field.sql".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(126, 231, 135), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("function.builtin.bash".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("function.builtin.make".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("function.call.bash".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("function.call.lua".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(126, 231, 135), false, false, false, false)),
        ("label.json".to_owned(), Style::new(Color::new(126, 231, 135), false, false, false, false)),
        ("label.lua".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("label.ruby".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("label.vimdoc".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("method.call.lua".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("namespace.builtin.lua".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("namespace.c_sharp".to_owned(), Style::new(Color::new(255, 166, 87), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("operator.bash".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("operator.lua".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("operator.luadoc".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("parameter.vimdoc".to_owned(), Style::new(Color::new(255, 166, 87), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("preproc.rust".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("property.scss".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("punctuation.delimiter.bash".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("punctuation.delimiter.markdown".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("punctuation.delimiter.markdown_inline".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("punctuation.special.luadoc".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(255, 166, 87), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, true)),
        ("string.regex".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("symbol.make".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("symbol.ruby".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(126, 231, 135), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(48, 54, 61), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(63, 185, 80), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(248, 81, 73), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(230, 237, 243), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(230, 237, 243), false, false, true, false)),
        ("text.math".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(48, 54, 61), false, false, false, false)),
        ("text.quote.markdown".to_owned(), Style::new(Color::new(126, 231, 135), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(230, 237, 243), true, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(230, 237, 243), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, true)),
        ("text.title.html".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(48, 54, 61), false, false, false, false)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(63, 185, 80), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(110, 118, 129), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(121, 192, 255), true, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(48, 54, 61), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(255, 166, 87), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("type.builtin.python".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("type.css".to_owned(), Style::new(Color::new(126, 231, 135), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(255, 166, 87), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("type.sql".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("variable.builtin.python".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(230, 237, 243), false, false, false, false)),
        ("variable.sql".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn dark_colorblind() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(13, 17, 23)),
        ("attribute".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(139, 148, 158), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("constant.builtin.rust".to_owned(), Style::new(Color::new(253, 172, 84), false, false, false, false)),
        ("constant.html".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(253, 172, 84), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(212, 118, 22), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("field.lua".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("field.luadoc".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("field.python".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("field.sql".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("function.builtin.bash".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("function.builtin.make".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("function.call.bash".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("function.call.lua".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("label.json".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("label.lua".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("label.ruby".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("label.vimdoc".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("method.call.lua".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("namespace.builtin.lua".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("namespace.c_sharp".to_owned(), Style::new(Color::new(253, 172, 84), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("operator.bash".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("operator.lua".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("operator.luadoc".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("parameter.vimdoc".to_owned(), Style::new(Color::new(253, 172, 84), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("preproc.rust".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("property.scss".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("punctuation.delimiter.bash".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("punctuation.delimiter.markdown".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("punctuation.delimiter.markdown_inline".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("punctuation.special.luadoc".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(253, 172, 84), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, true)),
        ("string.regex".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("symbol.make".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("symbol.ruby".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(13, 17, 23), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(88, 166, 255), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(212, 118, 22), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(201, 209, 217), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(201, 209, 217), false, false, true, false)),
        ("text.math".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(13, 17, 23), false, false, false, false)),
        ("text.quote.markdown".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(201, 209, 217), true, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(201, 209, 217), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, true)),
        ("text.title.html".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(13, 17, 23), false, false, false, false)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(88, 166, 255), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(110, 118, 129), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(121, 192, 255), true, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(13, 17, 23), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(253, 172, 84), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("type.builtin.python".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("type.css".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(253, 172, 84), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(236, 142, 44), false, false, false, false)),
        ("type.sql".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("variable.builtin.python".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("variable.sql".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn light() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(255, 255, 255)),
        ("attribute".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(10, 48, 105), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(110, 119, 129), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("constant.builtin.rust".to_owned(), Style::new(Color::new(149, 56, 0), false, false, false, false)),
        ("constant.html".to_owned(), Style::new(Color::new(17, 99, 41), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(149, 56, 0), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(209, 36, 47), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("field.lua".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("field.luadoc".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("field.python".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("field.sql".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(17, 99, 41), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("function.builtin.bash".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("function.builtin.make".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("function.call.bash".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("function.call.lua".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(17, 99, 41), false, false, false, false)),
        ("label.json".to_owned(), Style::new(Color::new(17, 99, 41), false, false, false, false)),
        ("label.lua".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("label.ruby".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("label.vimdoc".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("method.call.lua".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("namespace.builtin.lua".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("namespace.c_sharp".to_owned(), Style::new(Color::new(149, 56, 0), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("operator.bash".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("operator.lua".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("operator.luadoc".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("parameter.vimdoc".to_owned(), Style::new(Color::new(149, 56, 0), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("preproc.rust".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("property.scss".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("punctuation.delimiter.bash".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("punctuation.delimiter.markdown".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("punctuation.delimiter.markdown_inline".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("punctuation.special.luadoc".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(149, 56, 0), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(10, 48, 105), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(10, 48, 105), false, false, false, true)),
        ("string.regex".to_owned(), Style::new(Color::new(10, 48, 105), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("symbol.make".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("symbol.ruby".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(17, 99, 41), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(26, 127, 55), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(209, 36, 47), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(31, 35, 40), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(31, 35, 40), false, false, true, false)),
        ("text.math".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.quote.markdown".to_owned(), Style::new(Color::new(17, 99, 41), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(31, 35, 40), true, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(31, 35, 40), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, true)),
        ("text.title.html".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(17, 99, 41), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(87, 96, 106), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(5, 80, 174), true, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(149, 56, 0), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("type.builtin.python".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("type.css".to_owned(), Style::new(Color::new(17, 99, 41), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(149, 56, 0), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("type.sql".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("variable.builtin.python".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(31, 35, 40), false, false, false, false)),
        ("variable.sql".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn dimmed() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(34, 39, 46)),
        ("attribute".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(150, 208, 255), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(118, 131, 144), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("constant.builtin.rust".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("constant.html".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(229, 83, 75), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("field.lua".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("field.luadoc".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("field.python".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("field.sql".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(220, 189, 251), false, false, false, false)),
        ("function.builtin.bash".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("function.builtin.make".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("function.call.bash".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("function.call.lua".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("label.json".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("label.lua".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("label.ruby".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("label.vimdoc".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(220, 189, 251), false, false, false, false)),
        ("method.call.lua".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("namespace.builtin.lua".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("namespace.c_sharp".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("operator.bash".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("operator.lua".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("operator.luadoc".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("parameter.vimdoc".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("preproc.rust".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("property.scss".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("punctuation.delimiter.bash".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("punctuation.delimiter.markdown".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("punctuation.delimiter.markdown_inline".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("punctuation.special.luadoc".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(150, 208, 255), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(150, 208, 255), false, false, false, true)),
        ("string.regex".to_owned(), Style::new(Color::new(150, 208, 255), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("symbol.make".to_owned(), Style::new(Color::new(220, 189, 251), false, false, false, false)),
        ("symbol.ruby".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(34, 39, 46), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(87, 171, 90), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(229, 83, 75), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(173, 186, 199), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(220, 189, 251), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(173, 186, 199), false, false, true, false)),
        ("text.math".to_owned(), Style::new(Color::new(220, 189, 251), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(34, 39, 46), false, false, false, false)),
        ("text.quote.markdown".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(173, 186, 199), true, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(173, 186, 199), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, true)),
        ("text.title.html".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(34, 39, 46), false, false, false, false)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(87, 171, 90), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(99, 110, 123), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(108, 182, 255), true, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(34, 39, 46), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("type.builtin.python".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("type.css".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("type.sql".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("variable.builtin.python".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("variable.sql".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn dark_dimmed() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(34, 39, 46)),
        ("attribute".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(150, 208, 255), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(118, 131, 144), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("constant.builtin.rust".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("constant.html".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(229, 83, 75), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("field.lua".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("field.luadoc".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("field.python".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("field.sql".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(220, 189, 251), false, false, false, false)),
        ("function.builtin.bash".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("function.builtin.make".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("function.call.bash".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("function.call.lua".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("label.json".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("label.lua".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("label.ruby".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("label.vimdoc".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(220, 189, 251), false, false, false, false)),
        ("method.call.lua".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("namespace.builtin.lua".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("namespace.c_sharp".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("operator.bash".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("operator.lua".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("operator.luadoc".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("parameter.vimdoc".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("preproc.rust".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("property.scss".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("punctuation.delimiter.bash".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("punctuation.delimiter.markdown".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("punctuation.delimiter.markdown_inline".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("punctuation.special.luadoc".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(150, 208, 255), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(150, 208, 255), false, false, false, true)),
        ("string.regex".to_owned(), Style::new(Color::new(150, 208, 255), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("symbol.make".to_owned(), Style::new(Color::new(220, 189, 251), false, false, false, false)),
        ("symbol.ruby".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(34, 39, 46), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(87, 171, 90), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(229, 83, 75), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(173, 186, 199), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(220, 189, 251), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(173, 186, 199), false, false, true, false)),
        ("text.math".to_owned(), Style::new(Color::new(220, 189, 251), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(34, 39, 46), false, false, false, false)),
        ("text.quote.markdown".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(173, 186, 199), true, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(173, 186, 199), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, true)),
        ("text.title.html".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(34, 39, 46), false, false, false, false)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(87, 171, 90), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(99, 110, 123), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(108, 182, 255), true, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(34, 39, 46), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("type.builtin.python".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("type.css".to_owned(), Style::new(Color::new(141, 219, 140), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(246, 157, 80), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(244, 112, 103), false, false, false, false)),
        ("type.sql".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("variable.builtin.python".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(173, 186, 199), false, false, false, false)),
        ("variable.sql".to_owned(), Style::new(Color::new(108, 182, 255), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn dark_default() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(10, 12, 16)),
        ("attribute".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(173, 220, 255), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(189, 196, 204), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("constant.builtin.rust".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("constant.html".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(255, 106, 105), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("field.lua".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("field.luadoc".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("field.python".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("field.sql".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(219, 183, 255), false, false, false, false)),
        ("function.builtin.bash".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("function.builtin.make".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("function.call.bash".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("function.call.lua".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("label.json".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("label.lua".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("label.ruby".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("label.vimdoc".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(219, 183, 255), false, false, false, false)),
        ("method.call.lua".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("namespace.builtin.lua".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("namespace.c_sharp".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("operator.bash".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("operator.lua".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("operator.luadoc".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("parameter.vimdoc".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("preproc.rust".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("property.scss".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("punctuation.delimiter.bash".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("punctuation.delimiter.markdown".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("punctuation.delimiter.markdown_inline".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("punctuation.special.luadoc".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(173, 220, 255), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(173, 220, 255), false, false, false, true)),
        ("string.regex".to_owned(), Style::new(Color::new(173, 220, 255), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("symbol.make".to_owned(), Style::new(Color::new(219, 183, 255), false, false, false, false)),
        ("symbol.ruby".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(10, 12, 16), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(9, 180, 58), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(255, 106, 105), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(240, 243, 246), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(219, 183, 255), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(240, 243, 246), false, false, true, false)),
        ("text.math".to_owned(), Style::new(Color::new(219, 183, 255), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(10, 12, 16), false, false, false, false)),
        ("text.quote.markdown".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(240, 243, 246), true, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(240, 243, 246), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, true)),
        ("text.title.html".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(10, 12, 16), false, false, false, false)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(38, 205, 77), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(158, 167, 179), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(145, 203, 255), true, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(10, 12, 16), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("type.builtin.python".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("type.css".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("type.sql".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("variable.builtin.python".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("variable.sql".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn light_default() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(255, 255, 255)),
        ("attribute".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(3, 37, 99), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(102, 112, 123), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("constant.builtin.rust".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("constant.html".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(209, 36, 47), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("field.lua".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("field.luadoc".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("field.python".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("field.sql".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(81, 37, 152), false, false, false, false)),
        ("function.builtin.bash".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("function.builtin.make".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("function.call.bash".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("function.call.lua".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("label.json".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("label.lua".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("label.ruby".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("label.vimdoc".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(81, 37, 152), false, false, false, false)),
        ("method.call.lua".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("namespace.builtin.lua".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("namespace.c_sharp".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("operator.bash".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("operator.lua".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("operator.luadoc".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("parameter.vimdoc".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("preproc.rust".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("property.scss".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("punctuation.delimiter.bash".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("punctuation.delimiter.markdown".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("punctuation.delimiter.markdown_inline".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("punctuation.special.luadoc".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(3, 37, 99), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(3, 37, 99), false, false, false, true)),
        ("string.regex".to_owned(), Style::new(Color::new(3, 37, 99), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("symbol.make".to_owned(), Style::new(Color::new(81, 37, 152), false, false, false, false)),
        ("symbol.ruby".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(5, 93, 32), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(209, 36, 47), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(1, 4, 9), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(81, 37, 152), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(1, 4, 9), false, false, true, false)),
        ("text.math".to_owned(), Style::new(Color::new(81, 37, 152), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.quote.markdown".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(1, 4, 9), true, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(1, 4, 9), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, true)),
        ("text.title.html".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(75, 83, 93), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(2, 59, 149), true, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("type.builtin.python".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("type.css".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("type.sql".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("variable.builtin.python".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("variable.sql".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn dark_tritanopia() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(13, 17, 23)),
        ("attribute".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(139, 148, 158), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("constant.builtin.rust".to_owned(), Style::new(Color::new(255, 161, 152), false, false, false, false)),
        ("constant.html".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(255, 161, 152), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(248, 81, 73), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("field.lua".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("field.luadoc".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("field.python".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("field.sql".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("function.builtin.bash".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("function.builtin.make".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("function.call.bash".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("function.call.lua".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("label.json".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("label.lua".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("label.ruby".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("label.vimdoc".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("method.call.lua".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("namespace.builtin.lua".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("namespace.c_sharp".to_owned(), Style::new(Color::new(255, 161, 152), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("operator.bash".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("operator.lua".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("operator.luadoc".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("parameter.vimdoc".to_owned(), Style::new(Color::new(255, 161, 152), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("preproc.rust".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("property.scss".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("punctuation.delimiter.bash".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("punctuation.delimiter.markdown".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("punctuation.delimiter.markdown_inline".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("punctuation.special.luadoc".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(255, 161, 152), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, true)),
        ("string.regex".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("symbol.make".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("symbol.ruby".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(13, 17, 23), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(88, 166, 255), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(248, 81, 73), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(201, 209, 217), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(201, 209, 217), false, false, true, false)),
        ("text.math".to_owned(), Style::new(Color::new(210, 168, 255), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(13, 17, 23), false, false, false, false)),
        ("text.quote.markdown".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(201, 209, 217), true, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(201, 209, 217), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, true)),
        ("text.title.html".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(13, 17, 23), false, false, false, false)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(88, 166, 255), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(110, 118, 129), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(121, 192, 255), true, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(13, 17, 23), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(255, 161, 152), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("type.builtin.python".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("type.css".to_owned(), Style::new(Color::new(165, 214, 255), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(255, 161, 152), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(255, 123, 114), false, false, false, false)),
        ("type.sql".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("variable.builtin.python".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(201, 209, 217), false, false, false, false)),
        ("variable.sql".to_owned(), Style::new(Color::new(121, 192, 255), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn light_colorblind() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(255, 255, 255)),
        ("attribute".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(10, 48, 105), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(110, 119, 129), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("constant.builtin.rust".to_owned(), Style::new(Color::new(138, 70, 0), false, false, false, false)),
        ("constant.html".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(138, 70, 0), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(209, 36, 47), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("field.lua".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("field.luadoc".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("field.python".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("field.sql".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("function.builtin.bash".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("function.builtin.make".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("function.call.bash".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("function.call.lua".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("label.json".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("label.lua".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("label.ruby".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("label.vimdoc".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("method.call.lua".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("namespace.builtin.lua".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("namespace.c_sharp".to_owned(), Style::new(Color::new(138, 70, 0), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("operator.bash".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("operator.lua".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("operator.luadoc".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("parameter.vimdoc".to_owned(), Style::new(Color::new(138, 70, 0), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("preproc.rust".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("property.scss".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("punctuation.delimiter.bash".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("punctuation.delimiter.markdown".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("punctuation.delimiter.markdown_inline".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("punctuation.special.luadoc".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(138, 70, 0), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(10, 48, 105), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(10, 48, 105), false, false, false, true)),
        ("string.regex".to_owned(), Style::new(Color::new(10, 48, 105), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("symbol.make".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("symbol.ruby".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(9, 105, 218), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(209, 36, 47), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(27, 31, 36), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(27, 31, 36), false, false, true, false)),
        ("text.math".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.quote.markdown".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(27, 31, 36), true, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(27, 31, 36), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, true)),
        ("text.title.html".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(87, 96, 106), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(5, 80, 174), true, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(138, 70, 0), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("type.builtin.python".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("type.css".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(138, 70, 0), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(179, 89, 0), false, false, false, false)),
        ("type.sql".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("variable.builtin.python".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("variable.sql".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn light_tritanopia() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(255, 255, 255)),
        ("attribute".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(10, 48, 105), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(110, 119, 129), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("constant.builtin.rust".to_owned(), Style::new(Color::new(164, 14, 38), false, false, false, false)),
        ("constant.html".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(164, 14, 38), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(209, 36, 47), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("field.lua".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("field.luadoc".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("field.python".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("field.sql".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("function.builtin.bash".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("function.builtin.make".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("function.call.bash".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("function.call.lua".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("label.json".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("label.lua".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("label.ruby".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("label.vimdoc".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("method.call.lua".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("namespace.builtin.lua".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("namespace.c_sharp".to_owned(), Style::new(Color::new(164, 14, 38), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("operator.bash".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("operator.lua".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("operator.luadoc".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("parameter.vimdoc".to_owned(), Style::new(Color::new(164, 14, 38), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("preproc.rust".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("property.scss".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("punctuation.delimiter.bash".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("punctuation.delimiter.markdown".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("punctuation.delimiter.markdown_inline".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("punctuation.special.luadoc".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(164, 14, 38), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(10, 48, 105), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(10, 48, 105), false, false, false, true)),
        ("string.regex".to_owned(), Style::new(Color::new(10, 48, 105), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("symbol.make".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("symbol.ruby".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(9, 105, 218), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(209, 36, 47), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(27, 31, 36), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(27, 31, 36), false, false, true, false)),
        ("text.math".to_owned(), Style::new(Color::new(102, 57, 186), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.quote.markdown".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(27, 31, 36), true, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(27, 31, 36), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, true)),
        ("text.title.html".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(87, 96, 106), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(5, 80, 174), true, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(164, 14, 38), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("type.builtin.python".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("type.css".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(164, 14, 38), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(207, 34, 46), false, false, false, false)),
        ("type.sql".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("variable.builtin.python".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(27, 31, 36), false, false, false, false)),
        ("variable.sql".to_owned(), Style::new(Color::new(5, 80, 174), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn dark_high_contrast() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(10, 12, 16)),
        ("attribute".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(173, 220, 255), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(189, 196, 204), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("constant.builtin.rust".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("constant.html".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(255, 106, 105), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("field.lua".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("field.luadoc".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("field.python".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("field.sql".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(219, 183, 255), false, false, false, false)),
        ("function.builtin.bash".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("function.builtin.make".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("function.call.bash".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("function.call.lua".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("label.json".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("label.lua".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("label.ruby".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("label.vimdoc".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(219, 183, 255), false, false, false, false)),
        ("method.call.lua".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("namespace.builtin.lua".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("namespace.c_sharp".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("operator.bash".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("operator.lua".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("operator.luadoc".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("parameter.vimdoc".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("preproc.rust".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("property.scss".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("punctuation.delimiter.bash".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("punctuation.delimiter.markdown".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("punctuation.delimiter.markdown_inline".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("punctuation.special.luadoc".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(173, 220, 255), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(173, 220, 255), false, false, false, true)),
        ("string.regex".to_owned(), Style::new(Color::new(173, 220, 255), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("symbol.make".to_owned(), Style::new(Color::new(219, 183, 255), false, false, false, false)),
        ("symbol.ruby".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(10, 12, 16), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(9, 180, 58), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(255, 106, 105), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(240, 243, 246), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(219, 183, 255), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(240, 243, 246), false, false, true, false)),
        ("text.math".to_owned(), Style::new(Color::new(219, 183, 255), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(10, 12, 16), false, false, false, false)),
        ("text.quote.markdown".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(240, 243, 246), true, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(240, 243, 246), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, true)),
        ("text.title.html".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(10, 12, 16), false, false, false, false)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(38, 205, 77), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(158, 167, 179), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(145, 203, 255), true, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(10, 12, 16), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("type.builtin.python".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("type.css".to_owned(), Style::new(Color::new(114, 240, 136), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(255, 183, 87), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(255, 148, 146), false, false, false, false)),
        ("type.sql".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("variable.builtin.python".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(240, 243, 246), false, false, false, false)),
        ("variable.sql".to_owned(), Style::new(Color::new(145, 203, 255), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn light_high_contrast() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(255, 255, 255)),
        ("attribute".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(3, 37, 99), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(102, 112, 123), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("constant.builtin.rust".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("constant.html".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(209, 36, 47), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("field.lua".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("field.luadoc".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("field.python".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("field.sql".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(81, 37, 152), false, false, false, false)),
        ("function.builtin.bash".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("function.builtin.make".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("function.call.bash".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("function.call.lua".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("label.json".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("label.lua".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("label.ruby".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("label.vimdoc".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(81, 37, 152), false, false, false, false)),
        ("method.call.lua".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("namespace.builtin.lua".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("namespace.c_sharp".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("operator.bash".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("operator.lua".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("operator.luadoc".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("parameter.vimdoc".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("preproc.rust".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("property.scss".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("punctuation.delimiter.bash".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("punctuation.delimiter.markdown".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("punctuation.delimiter.markdown_inline".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("punctuation.special.luadoc".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(3, 37, 99), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(3, 37, 99), false, false, false, true)),
        ("string.regex".to_owned(), Style::new(Color::new(3, 37, 99), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("symbol.make".to_owned(), Style::new(Color::new(81, 37, 152), false, false, false, false)),
        ("symbol.ruby".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(5, 93, 32), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(209, 36, 47), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(1, 4, 9), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(81, 37, 152), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(1, 4, 9), false, false, true, false)),
        ("text.math".to_owned(), Style::new(Color::new(81, 37, 152), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.quote.markdown".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(1, 4, 9), true, false, false, false)),
        ("text.strike".to_owned(), Style::new(Color::new(1, 4, 9), false, true, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, true)),
        ("text.title".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, true)),
        ("text.title.html".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(75, 83, 93), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(2, 59, 149), true, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(255, 255, 255), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("type.builtin.python".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("type.css".to_owned(), Style::new(Color::new(2, 76, 26), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(112, 44, 0), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(160, 17, 31), false, false, false, false)),
        ("type.sql".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("variable.builtin.python".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(1, 4, 9), false, false, false, false)),
        ("variable.sql".to_owned(), Style::new(Color::new(2, 59, 149), false, false, false, false)),
    ]))
}
