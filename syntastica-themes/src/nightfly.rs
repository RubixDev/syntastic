//! The nightfly theme collection in this module was extracted from <https://github.com/bluz71/vim-nightfly-colors> using `auto_extract.py`.

use std::collections::BTreeMap;

use syntastica_core::{
    style::{Color, Style},
    theme::ResolvedTheme,
};

#[rustfmt::skip]
pub fn nightfly() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("bg0".to_owned(), Style::color_only(1, 22, 39)),
        ("annotation".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("attribute".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(124, 143, 143), false, false, true, false)),
        ("conditional".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(127, 219, 202), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(161, 205, 94), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(33, 199, 168), false, false, false, false)),
        ("danger".to_owned(), Style::new(Color::new(227, 209, 138), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(252, 81, 78), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(127, 219, 202), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("function.call".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("keyword.gitcommit".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(127, 219, 202), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(127, 219, 202), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(227, 154, 166), false, false, false, false)),
        ("parameter.bash".to_owned(), Style::new(Color::new(127, 219, 202), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(127, 219, 202), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(195, 204, 220), false, false, false, false)),
        ("punctuation.delimiter.astro".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("punctuation.delimiter.css".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("punctuation.delimiter.rust".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("punctuation.delimiter.scss".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("punctuation.delimiter.yaml".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("storageclass.rust".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(236, 196, 141), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(127, 219, 202), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(127, 219, 202), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(161, 205, 94), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(252, 81, 78), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(75, 100, 121), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(227, 154, 166), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(33, 199, 168), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(236, 196, 141), false, false, false, false)),
        ("text.math".to_owned(), Style::new(Color::new(255, 88, 116), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(124, 143, 143), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(161, 205, 94), false, false, false, false)),
        ("text.reference.gitcommit".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(227, 154, 166), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("text.title.astro".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("text.title.gitcommit".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("text.title.help".to_owned(), Style::new(Color::new(135, 188, 255), false, false, false, false)),
        ("text.title.html".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("text.title.svelte".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("text.title.vue".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(227, 209, 138), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("text.uri.astro".to_owned(), Style::new(Color::new(199, 146, 234), false, false, true, false)),
        ("text.uri.gitcommit".to_owned(), Style::new(Color::new(33, 199, 168), false, false, false, false)),
        ("text.uri.html".to_owned(), Style::new(Color::new(199, 146, 234), false, false, true, false)),
        ("text.uri.svelte".to_owned(), Style::new(Color::new(199, 146, 234), false, false, true, false)),
        ("text.uri.vue".to_owned(), Style::new(Color::new(199, 146, 234), false, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(227, 209, 138), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(33, 199, 168), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(33, 199, 168), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(33, 199, 168), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(195, 204, 220), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(161, 205, 94), false, false, false, false)),
        ("variable.builtin.vim".to_owned(), Style::new(Color::new(33, 199, 168), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(127, 219, 202), false, false, false, false)),
        ("variable.vim".to_owned(), Style::new(Color::new(127, 219, 202), false, false, false, false)),
    ]))
}
