//! The monokai theme collection in this module was extracted from <https://github.com/tanvirtin/monokai.nvim> using `auto_extract.py`.

use std::collections::BTreeMap;

use syntastica_core::{
    style::{Color, Style},
    theme::ResolvedTheme,
};

#[rustfmt::skip]
pub fn monokai() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(248, 248, 240)),
        ("_bg".to_owned(), Style::color_only(38, 41, 44)),
        ("annotation".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("attribute".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(230, 219, 116), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(156, 160, 164), false, false, true, false)),
        ("conceal".to_owned(), Style::new(Color::new(143, 144, 138), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("conditional.ternary".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("definition".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("definition.associated".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("definition.constant".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("definition.enum".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("definition.field".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("definition.function".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("definition.import".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("definition.macro".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("definition.method".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("definition.namespace".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("definition.parameter".to_owned(), Style::new(Color::new(253, 151, 31), false, false, false, false)),
        ("definition.type".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("definition.var".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(233, 86, 120), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(166, 226, 46), false, false, true, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("function.call".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(166, 226, 46), false, false, true, false)),
        ("include".to_owned(), Style::new(Color::new(102, 217, 239), false, false, true, false)),
        ("keyword".to_owned(), Style::new(Color::new(249, 38, 114), false, false, true, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(102, 217, 239), false, false, true, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("keyword.return".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("math".to_owned(), Style::new(Color::new(230, 219, 116), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("method.call".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(253, 151, 31), false, false, false, false)),
        ("parameter.reference".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("reference".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("scope".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("storageclass.lifetime".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("strike".to_owned(), Style::new(Color::new(143, 144, 138), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(230, 219, 116), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(166, 226, 46), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(233, 86, 120), false, false, false, true)),
        ("text.diff.add".to_owned(), Style::new(Color::new(61, 82, 19), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(74, 15, 35), false, false, false, false)),
        ("text.environment".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(230, 219, 116), false, false, false, false)),
        ("text.math".to_owned(), Style::new(Color::new(230, 219, 116), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, true)),
        ("text.quote".to_owned(), Style::new(Color::new(143, 144, 138), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(253, 151, 31), false, false, true, false)),
        ("text.strike".to_owned(), Style::new(Color::new(143, 144, 138), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(230, 219, 116), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(102, 217, 239), true, false, false, false)),
        ("text.warning".to_owned(), Style::new(Color::new(230, 219, 116), false, false, false, true)),
        ("todo".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(102, 217, 239), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(249, 38, 114), false, false, false, false)),
        ("uri".to_owned(), Style::new(Color::new(102, 217, 239), true, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(248, 248, 240), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(253, 151, 31), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn ristretto() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(255, 241, 243)),
        ("_bg".to_owned(), Style::color_only(44, 37, 37)),
        ("annotation".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("attribute".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(168, 169, 235), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(249, 204, 108), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(168, 169, 235), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(140, 131, 132), false, false, true, false)),
        ("conceal".to_owned(), Style::new(Color::new(114, 105, 106), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("conditional.ternary".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(168, 169, 235), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(168, 169, 235), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, false)),
        ("definition".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("definition.associated".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("definition.constant".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("definition.enum".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("definition.field".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("definition.function".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("definition.import".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("definition.macro".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("definition.method".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("definition.namespace".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("definition.parameter".to_owned(), Style::new(Color::new(243, 141, 112), false, false, false, false)),
        ("definition.type".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("definition.var".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(253, 104, 131), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(168, 169, 235), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(173, 218, 120), false, false, true, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, false)),
        ("function.call".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(173, 218, 120), false, false, true, false)),
        ("include".to_owned(), Style::new(Color::new(133, 218, 204), false, false, true, false)),
        ("keyword".to_owned(), Style::new(Color::new(255, 97, 136), false, false, true, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(133, 218, 204), false, false, true, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("keyword.return".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("math".to_owned(), Style::new(Color::new(249, 204, 108), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("method.call".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(168, 169, 235), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(168, 169, 235), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(243, 141, 112), false, false, false, false)),
        ("parameter.reference".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("reference".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("scope".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, false)),
        ("storageclass.lifetime".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, false)),
        ("strike".to_owned(), Style::new(Color::new(114, 105, 106), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(249, 204, 108), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(168, 169, 235), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(168, 169, 235), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(168, 169, 235), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(168, 169, 235), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(173, 218, 120), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(253, 104, 131), false, false, false, true)),
        ("text.diff.add".to_owned(), Style::new(Color::new(82, 119, 40), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(132, 35, 53), false, false, false, false)),
        ("text.environment".to_owned(), Style::new(Color::new(168, 169, 235), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(249, 204, 108), false, false, false, false)),
        ("text.math".to_owned(), Style::new(Color::new(249, 204, 108), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, true)),
        ("text.quote".to_owned(), Style::new(Color::new(114, 105, 106), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(243, 141, 112), false, false, true, false)),
        ("text.strike".to_owned(), Style::new(Color::new(114, 105, 106), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(249, 204, 108), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(133, 218, 204), true, false, false, false)),
        ("text.warning".to_owned(), Style::new(Color::new(249, 204, 108), false, false, false, true)),
        ("todo".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(133, 218, 204), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("uri".to_owned(), Style::new(Color::new(133, 218, 204), true, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(243, 141, 112), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn soda() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(246, 246, 236)),
        ("_bg".to_owned(), Style::color_only(38, 41, 44)),
        ("annotation".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("attribute".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(156, 100, 254), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(223, 213, 97), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(156, 100, 254), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(114, 105, 106), false, false, true, false)),
        ("conceal".to_owned(), Style::new(Color::new(114, 105, 106), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("conditional.ternary".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(156, 100, 254), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(156, 100, 254), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("definition".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("definition.associated".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("definition.constant".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("definition.enum".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("definition.field".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("definition.function".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("definition.import".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("definition.macro".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("definition.method".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("definition.namespace".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("definition.parameter".to_owned(), Style::new(Color::new(250, 132, 25), false, false, false, false)),
        ("definition.type".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("definition.var".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(156, 100, 254), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(151, 224, 35), false, false, true, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("function.call".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(151, 224, 35), false, false, true, false)),
        ("include".to_owned(), Style::new(Color::new(120, 220, 232), false, false, true, false)),
        ("keyword".to_owned(), Style::new(Color::new(243, 0, 95), false, false, true, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(120, 220, 232), false, false, true, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("keyword.return".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("math".to_owned(), Style::new(Color::new(223, 213, 97), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("method.call".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(156, 100, 254), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(156, 100, 254), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(250, 132, 25), false, false, false, false)),
        ("parameter.reference".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("reference".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("scope".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("storageclass.lifetime".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("strike".to_owned(), Style::new(Color::new(114, 105, 106), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(223, 213, 97), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(156, 100, 254), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(156, 100, 254), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(156, 100, 254), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(156, 100, 254), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(151, 224, 35), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, true)),
        ("text.diff.add".to_owned(), Style::new(Color::new(61, 82, 19), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(74, 15, 35), false, false, false, false)),
        ("text.environment".to_owned(), Style::new(Color::new(156, 100, 254), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(223, 213, 97), false, false, false, false)),
        ("text.math".to_owned(), Style::new(Color::new(223, 213, 97), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, true)),
        ("text.quote".to_owned(), Style::new(Color::new(114, 105, 106), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(250, 132, 25), false, false, true, false)),
        ("text.strike".to_owned(), Style::new(Color::new(114, 105, 106), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(223, 213, 97), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(120, 220, 232), true, false, false, false)),
        ("text.warning".to_owned(), Style::new(Color::new(223, 213, 97), false, false, false, true)),
        ("todo".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(243, 0, 95), false, false, false, false)),
        ("uri".to_owned(), Style::new(Color::new(120, 220, 232), true, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(246, 246, 236), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(250, 132, 25), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn pro() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(255, 241, 243)),
        ("_bg".to_owned(), Style::color_only(38, 41, 44)),
        ("annotation".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("attribute".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(171, 157, 242), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(255, 216, 102), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(171, 157, 242), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(114, 105, 106), false, false, true, false)),
        ("conceal".to_owned(), Style::new(Color::new(114, 105, 106), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("conditional.ternary".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(171, 157, 242), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(171, 157, 242), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("definition".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("definition.associated".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("definition.constant".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("definition.enum".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("definition.field".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("definition.function".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("definition.import".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("definition.macro".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("definition.method".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("definition.namespace".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("definition.parameter".to_owned(), Style::new(Color::new(252, 152, 103), false, false, false, false)),
        ("definition.type".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("definition.var".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(253, 104, 131), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(171, 157, 242), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(169, 220, 118), false, false, true, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("function.call".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(169, 220, 118), false, false, true, false)),
        ("include".to_owned(), Style::new(Color::new(120, 220, 232), false, false, true, false)),
        ("keyword".to_owned(), Style::new(Color::new(255, 97, 136), false, false, true, false)),
        ("keyword.function".to_owned(), Style::new(Color::new(120, 220, 232), false, false, true, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("keyword.return".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("math".to_owned(), Style::new(Color::new(255, 216, 102), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("method.call".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(171, 157, 242), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(171, 157, 242), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(252, 152, 103), false, false, false, false)),
        ("parameter.reference".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("reference".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("scope".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("storageclass.lifetime".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("strike".to_owned(), Style::new(Color::new(114, 105, 106), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(255, 216, 102), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(171, 157, 242), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(171, 157, 242), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(171, 157, 242), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(171, 157, 242), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(169, 220, 118), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(253, 104, 131), false, false, false, true)),
        ("text.diff.add".to_owned(), Style::new(Color::new(61, 82, 19), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(74, 15, 35), false, false, false, false)),
        ("text.environment".to_owned(), Style::new(Color::new(171, 157, 242), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(255, 216, 102), false, false, false, false)),
        ("text.math".to_owned(), Style::new(Color::new(255, 216, 102), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, true)),
        ("text.quote".to_owned(), Style::new(Color::new(114, 105, 106), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(252, 152, 103), false, false, true, false)),
        ("text.strike".to_owned(), Style::new(Color::new(114, 105, 106), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(255, 216, 102), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(120, 220, 232), true, false, false, false)),
        ("text.warning".to_owned(), Style::new(Color::new(255, 216, 102), false, false, false, true)),
        ("todo".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(120, 220, 232), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(255, 97, 136), false, false, false, false)),
        ("uri".to_owned(), Style::new(Color::new(120, 220, 232), true, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(255, 241, 243), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(252, 152, 103), false, false, false, false)),
    ]))
}
