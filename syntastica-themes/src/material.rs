//! The material theme collection in this module was extracted from <https://github.com/marko-cerovac/material.nvim> using `auto_extract.py`.

use std::collections::BTreeMap;

use syntastica_core::{
    style::{Color, Style},
    theme::ResolvedTheme,
};

#[rustfmt::skip]
pub fn darker() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(176, 190, 197)),
        ("_bg".to_owned(), Style::color_only(33, 33, 33)),
        ("attribute".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(81, 81, 81), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(255, 128, 255), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(140, 139, 139), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(176, 190, 197), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(140, 139, 139), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(195, 232, 141), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(140, 139, 139), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(140, 139, 139), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(195, 232, 141), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("text.environment".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(195, 232, 141), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(176, 190, 197), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, true)),
        ("text.uri".to_owned(), Style::new(Color::new(128, 203, 196), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(176, 190, 197), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(176, 190, 197), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn lighter() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(84, 110, 122)),
        ("_bg".to_owned(), Style::color_only(250, 250, 250)),
        ("attribute".to_owned(), Style::new(Color::new(97, 130, 184), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(247, 109, 71), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(247, 109, 71), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(229, 57, 53), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(170, 191, 201), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(124, 77, 255), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(246, 164, 52), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(246, 164, 52), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(97, 130, 184), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(229, 57, 53), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(255, 128, 255), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(229, 57, 53), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(148, 167, 176), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(247, 109, 71), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(97, 130, 184), false, false, false, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(97, 130, 184), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(246, 164, 52), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(97, 130, 184), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(246, 164, 52), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(247, 109, 71), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(84, 110, 122), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(148, 167, 176), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(124, 77, 255), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(145, 184, 89), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(148, 167, 176), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(246, 164, 52), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(148, 167, 176), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(246, 164, 52), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(229, 57, 53), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(124, 77, 255), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(145, 184, 89), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(229, 57, 53), false, false, false, false)),
        ("text.environment".to_owned(), Style::new(Color::new(229, 57, 53), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(229, 57, 53), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(145, 184, 89), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(246, 164, 52), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(84, 110, 122), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(246, 164, 52), false, false, false, true)),
        ("text.uri".to_owned(), Style::new(Color::new(128, 203, 196), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(124, 77, 255), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(124, 77, 255), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(124, 77, 255), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(57, 173, 181), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(84, 110, 122), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(84, 110, 122), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn oceanic() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(176, 190, 197)),
        ("_bg".to_owned(), Style::color_only(37, 54, 59)),
        ("attribute".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(84, 110, 122), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(255, 128, 255), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(124, 158, 173), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(176, 190, 197), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(124, 158, 173), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(195, 232, 141), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(124, 158, 173), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(124, 158, 173), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(195, 232, 141), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("text.environment".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(195, 232, 141), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(176, 190, 197), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, true)),
        ("text.uri".to_owned(), Style::new(Color::new(128, 203, 196), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(176, 190, 197), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(176, 190, 197), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn palenight() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(166, 172, 205)),
        ("_bg".to_owned(), Style::color_only(41, 45, 62)),
        ("attribute".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(103, 110, 149), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(255, 128, 255), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(113, 124, 180), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(166, 172, 205), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(113, 124, 180), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(195, 232, 141), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(113, 124, 180), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(113, 124, 180), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(195, 232, 141), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("text.environment".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(195, 232, 141), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(166, 172, 205), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, true)),
        ("text.uri".to_owned(), Style::new(Color::new(128, 203, 196), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(166, 172, 205), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(166, 172, 205), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn deep_ocean() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(166, 172, 205)),
        ("_bg".to_owned(), Style::color_only(15, 17, 26)),
        ("attribute".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(70, 75, 93), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(255, 128, 255), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(113, 124, 180), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(130, 170, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(247, 140, 108), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(166, 172, 205), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(113, 124, 180), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(195, 232, 141), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(113, 124, 180), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(113, 124, 180), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("text.diff.add".to_owned(), Style::new(Color::new(195, 232, 141), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("text.environment".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(240, 113, 120), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(195, 232, 141), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(166, 172, 205), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(255, 203, 107), false, false, false, true)),
        ("text.uri".to_owned(), Style::new(Color::new(128, 203, 196), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(199, 146, 234), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(137, 221, 255), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(166, 172, 205), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(166, 172, 205), false, false, false, false)),
    ]))
}
