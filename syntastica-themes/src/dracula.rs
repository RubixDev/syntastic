//! The dracula theme collection in this module was extracted from <https://github.com/dracula/vim> using `auto_extract.py`.

use std::collections::BTreeMap;

use syntastica_core::{
    style::{Color, Style},
    theme::ResolvedTheme,
};

#[rustfmt::skip]
pub fn dracula() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(244, 243, 242)),
        ("_bg".to_owned(), Style::color_only(33, 34, 44)),
        ("annotation".to_owned(), Style::new(Color::new(255, 85, 95), false, false, false, false)),
        ("attribute".to_owned(), Style::new(Color::new(241, 250, 135), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(255, 121, 193), false, false, true, false)),
        ("character".to_owned(), Style::new(Color::new(221, 207, 191), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(255, 121, 199), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(100, 118, 166), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(239, 112, 160), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(152, 118, 170), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(152, 118, 170), false, false, false, true)),
        ("constant.macro".to_owned(), Style::new(Color::new(255, 85, 95), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(189, 148, 244), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(255, 85, 95), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(255, 121, 199), false, false, false, false)),
        ("emphasis".to_owned(), Style::new(Color::new(241, 250, 135), false, false, false, true)),
        ("exception".to_owned(), Style::new(Color::new(158, 113, 207), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(147, 115, 165), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(255, 121, 193), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(95, 246, 125), false, false, false, true)),
        ("function.builtin".to_owned(), Style::new(Color::new(95, 246, 125), false, false, false, true)),
        ("function.call".to_owned(), Style::new(Color::new(95, 246, 125), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(139, 228, 241), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(4, 209, 249), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(254, 87, 192), false, false, false, true)),
        ("keyword.function".to_owned(), Style::new(Color::new(254, 199, 80), false, false, false, true)),
        ("keyword.operator".to_owned(), Style::new(Color::new(139, 228, 241), false, false, false, false)),
        ("keyword.return".to_owned(), Style::new(Color::new(254, 87, 192), false, false, false, true)),
        ("label".to_owned(), Style::new(Color::new(26, 173, 22), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(139, 228, 241), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(127, 230, 93), false, false, false, true)),
        ("method.call".to_owned(), Style::new(Color::new(127, 230, 93), false, false, false, true)),
        ("namespace".to_owned(), Style::new(Color::new(251, 236, 159), false, false, false, false)),
        ("none".to_owned(), Style::new(Color::new(100, 118, 166), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(189, 148, 244), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(139, 228, 241), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(218, 113, 194), false, false, false, true)),
        ("parameter.reference".to_owned(), Style::new(Color::new(241, 250, 135), false, false, false, true)),
        ("preproc".to_owned(), Style::new(Color::new(189, 148, 244), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(147, 115, 165), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(16, 174, 248), false, false, false, false)),
        ("punctuation.bracket".to_owned(), Style::new(Color::new(248, 246, 170), false, false, false, false)),
        ("punctuation.delimiter".to_owned(), Style::new(Color::new(139, 228, 241), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(64, 142, 248), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(239, 112, 160), false, false, false, true)),
        ("storageclass".to_owned(), Style::new(Color::new(250, 128, 114), false, false, false, false)),
        ("strike".to_owned(), Style::new(Color::new(161, 171, 224), false, true, false, false)),
        ("string".to_owned(), Style::new(Color::new(250, 199, 57), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(97, 87, 82), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(241, 155, 182), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(255, 121, 199), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(169, 237, 255), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(152, 238, 100), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(245, 226, 237), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(16, 174, 248), false, false, false, false)),
        ("text".to_owned(), Style::new(Color::new(244, 243, 242), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(255, 0, 0), false, false, false, false)),
        ("text.environment".to_owned(), Style::new(Color::new(139, 228, 241), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(4, 209, 249), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(250, 199, 57), false, false, false, false)),
        ("text.literal.markdown".to_owned(), Style::new(Color::new(244, 243, 242), false, false, false, false)),
        ("text.literal.markdown_inline".to_owned(), Style::new(Color::new(255, 85, 95), false, false, false, false)),
        ("text.math".to_owned(), Style::new(Color::new(255, 85, 95), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(100, 118, 166), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(152, 118, 170), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(254, 248, 242), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(241, 250, 135), false, false, true, true)),
        ("text.todo.checked".to_owned(), Style::new(Color::new(100, 118, 166), false, false, false, false)),
        ("text.todo.unchecked".to_owned(), Style::new(Color::new(241, 250, 135), false, false, true, true)),
        ("text.uri".to_owned(), Style::new(Color::new(128, 203, 196), false, false, false, false)),
        ("text.warning".to_owned(), Style::new(Color::new(241, 250, 135), false, false, false, false)),
        ("title".to_owned(), Style::new(Color::new(254, 248, 242), false, false, false, true)),
        ("type".to_owned(), Style::new(Color::new(4, 209, 249), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(174, 129, 239), false, false, false, true)),
        ("type.definition".to_owned(), Style::new(Color::new(249, 39, 114), false, false, false, false)),
        ("type.deinition".to_owned(), Style::new(Color::new(249, 39, 114), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(4, 209, 249), false, false, false, false)),
        ("underline".to_owned(), Style::new(Color::new(244, 243, 242), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(245, 226, 237), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(245, 226, 237), false, false, false, false)),
    ]))
}
