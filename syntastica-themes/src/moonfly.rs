//! The moonfly theme collection in this module was extracted from <https://github.com/bluz71/vim-moonfly-colors> using `auto_extract.py`.

use std::collections::BTreeMap;

use syntastica_core::{
    style::{Color, Style},
    theme::ResolvedTheme,
};

#[rustfmt::skip]
pub fn moonfly() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(198, 198, 198)),
        ("_bg".to_owned(), Style::color_only(8, 8, 8)),
        ("annotation".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("attribute".to_owned(), Style::new(Color::new(116, 178, 255), false, false, false, false)),
        ("boolean".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(148, 148, 148), false, false, true, false)),
        ("conditional".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(121, 218, 200), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(140, 200, 95), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(54, 198, 146), false, false, false, false)),
        ("danger".to_owned(), Style::new(Color::new(227, 199, 138), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("error".to_owned(), Style::new(Color::new(255, 84, 84), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(121, 218, 200), false, false, false, false)),
        ("field.yaml".to_owned(), Style::new(Color::new(128, 160, 255), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(222, 147, 95), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(116, 178, 255), false, false, false, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(116, 178, 255), false, false, false, false)),
        ("function.call".to_owned(), Style::new(Color::new(116, 178, 255), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(116, 178, 255), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("keyword.gitcommit".to_owned(), Style::new(Color::new(116, 178, 255), false, false, false, false)),
        ("keyword.operator".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(121, 218, 200), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(116, 178, 255), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(121, 218, 200), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(222, 147, 95), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(225, 150, 162), false, false, false, false)),
        ("parameter.bash".to_owned(), Style::new(Color::new(121, 218, 200), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(121, 218, 200), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(198, 198, 198), false, false, false, false)),
        ("punctuation.delimiter.astro".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("punctuation.delimiter.css".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("punctuation.delimiter.rust".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("punctuation.delimiter.scss".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("punctuation.delimiter.yaml".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("punctuation.special".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(240, 148, 121), false, false, false, false)),
        ("storageclass.rust".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(194, 194, 146), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("string.regex".to_owned(), Style::new(Color::new(121, 218, 200), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("symbol".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(128, 160, 255), false, false, false, false)),
        ("tag.attribute".to_owned(), Style::new(Color::new(121, 218, 200), false, false, false, false)),
        ("tag.delimiter".to_owned(), Style::new(Color::new(133, 220, 133), false, false, false, false)),
        ("text.danger".to_owned(), Style::new(Color::new(255, 84, 84), false, false, false, false)),
        ("text.diff.delete".to_owned(), Style::new(Color::new(98, 98, 98), false, false, false, false)),
        ("text.emphasis".to_owned(), Style::new(Color::new(225, 150, 162), false, false, true, false)),
        ("text.environment".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("text.environment.name".to_owned(), Style::new(Color::new(54, 198, 146), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(194, 194, 146), false, false, false, false)),
        ("text.math".to_owned(), Style::new(Color::new(230, 94, 114), false, false, false, false)),
        ("text.note".to_owned(), Style::new(Color::new(148, 148, 148), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(140, 200, 95), false, false, false, false)),
        ("text.reference.gitcommit".to_owned(), Style::new(Color::new(128, 160, 255), false, false, false, false)),
        ("text.strong".to_owned(), Style::new(Color::new(225, 150, 162), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(128, 160, 255), false, false, false, false)),
        ("text.title.astro".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("text.title.gitcommit".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("text.title.help".to_owned(), Style::new(Color::new(116, 178, 255), false, false, false, false)),
        ("text.title.html".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("text.title.svelte".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("text.title.vue".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("text.todo".to_owned(), Style::new(Color::new(227, 199, 138), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(174, 129, 255), false, false, false, false)),
        ("text.uri.astro".to_owned(), Style::new(Color::new(207, 135, 232), false, false, true, false)),
        ("text.uri.gitcommit".to_owned(), Style::new(Color::new(54, 198, 146), false, false, false, false)),
        ("text.uri.html".to_owned(), Style::new(Color::new(207, 135, 232), false, false, true, false)),
        ("text.uri.svelte".to_owned(), Style::new(Color::new(207, 135, 232), false, false, true, false)),
        ("text.uri.vue".to_owned(), Style::new(Color::new(207, 135, 232), false, false, true, false)),
        ("text.warning".to_owned(), Style::new(Color::new(227, 199, 138), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(54, 198, 146), false, false, false, false)),
        ("type.builtin".to_owned(), Style::new(Color::new(54, 198, 146), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(54, 198, 146), false, false, false, false)),
        ("type.qualifier".to_owned(), Style::new(Color::new(207, 135, 232), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(198, 198, 198), false, false, false, false)),
        ("variable.builtin".to_owned(), Style::new(Color::new(133, 220, 133), false, false, false, false)),
        ("variable.builtin.vim".to_owned(), Style::new(Color::new(54, 198, 146), false, false, false, false)),
        ("variable.scss".to_owned(), Style::new(Color::new(121, 218, 200), false, false, false, false)),
        ("variable.vim".to_owned(), Style::new(Color::new(121, 218, 200), false, false, false, false)),
    ]))
}
