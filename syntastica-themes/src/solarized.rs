//! The solarized theme collection in this module was extracted from <https://github.com/overcache/NeoSolarized> using `auto_extract.py`.

use std::collections::BTreeMap;

use syntastica_core::{
    style::{Color, Style},
    theme::ResolvedTheme,
};

#[rustfmt::skip]
pub fn dark() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(131, 148, 150)),
        ("_bg".to_owned(), Style::color_only(0, 43, 54)),
        ("boolean".to_owned(), Style::new(Color::new(42, 161, 152), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(42, 161, 152), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(88, 110, 117), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(113, 158, 7), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(42, 161, 152), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(113, 158, 7), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(42, 161, 152), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(113, 158, 7), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(113, 158, 7), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(42, 161, 152), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(113, 158, 7), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(113, 158, 7), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(181, 137, 0), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(42, 161, 152), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(88, 110, 117), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(211, 54, 130), false, false, false, true)),
        ("text.underline".to_owned(), Style::new(Color::new(108, 113, 196), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(108, 113, 196), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(181, 137, 0), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(181, 137, 0), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
    ]))
}

#[rustfmt::skip]
pub fn light() -> ResolvedTheme {
    ResolvedTheme::new(BTreeMap::from([
        ("_fg".to_owned(), Style::color_only(101, 123, 131)),
        ("_bg".to_owned(), Style::color_only(253, 246, 227)),
        ("boolean".to_owned(), Style::new(Color::new(42, 161, 152), false, false, false, false)),
        ("character".to_owned(), Style::new(Color::new(42, 161, 152), false, false, false, false)),
        ("character.special".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("comment".to_owned(), Style::new(Color::new(147, 161, 161), false, false, false, false)),
        ("conditional".to_owned(), Style::new(Color::new(113, 158, 7), false, false, false, false)),
        ("constant".to_owned(), Style::new(Color::new(42, 161, 152), false, false, false, false)),
        ("constant.builtin".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("constant.macro".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, false)),
        ("constructor".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("debug".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("define".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, false)),
        ("exception".to_owned(), Style::new(Color::new(113, 158, 7), false, false, false, false)),
        ("field".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("float".to_owned(), Style::new(Color::new(42, 161, 152), false, false, false, false)),
        ("function".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("function.builtin".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("function.macro".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, false)),
        ("include".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, false)),
        ("keyword".to_owned(), Style::new(Color::new(113, 158, 7), false, false, false, false)),
        ("label".to_owned(), Style::new(Color::new(113, 158, 7), false, false, false, false)),
        ("macro".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, false)),
        ("method".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("namespace".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("number".to_owned(), Style::new(Color::new(42, 161, 152), false, false, false, false)),
        ("operator".to_owned(), Style::new(Color::new(113, 158, 7), false, false, false, false)),
        ("parameter".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("preproc".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, false)),
        ("property".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("punctuation".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("repeat".to_owned(), Style::new(Color::new(113, 158, 7), false, false, false, false)),
        ("storageclass".to_owned(), Style::new(Color::new(181, 137, 0), false, false, false, false)),
        ("string".to_owned(), Style::new(Color::new(42, 161, 152), false, false, false, false)),
        ("string.escape".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("string.special".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("tag".to_owned(), Style::new(Color::new(220, 50, 47), false, false, false, false)),
        ("text.literal".to_owned(), Style::new(Color::new(147, 161, 161), false, false, false, false)),
        ("text.reference".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
        ("text.title".to_owned(), Style::new(Color::new(203, 75, 22), false, false, false, true)),
        ("text.todo".to_owned(), Style::new(Color::new(211, 54, 130), false, false, false, true)),
        ("text.underline".to_owned(), Style::new(Color::new(108, 113, 196), false, false, false, false)),
        ("text.uri".to_owned(), Style::new(Color::new(108, 113, 196), false, false, false, false)),
        ("type".to_owned(), Style::new(Color::new(181, 137, 0), false, false, false, false)),
        ("type.definition".to_owned(), Style::new(Color::new(181, 137, 0), false, false, false, false)),
        ("variable".to_owned(), Style::new(Color::new(38, 139, 210), false, false, false, false)),
    ]))
}
